/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as GuardLayoutImport } from './routes/_guard-layout'
import { Route as IndexImport } from './routes/index'
import { Route as authRegistrationImport } from './routes/(auth)/registration'
import { Route as authLoginImport } from './routes/(auth)/login'

// Create Virtual Routes

const GuardLayoutMonitoringLazyImport = createFileRoute(
  '/_guard-layout/monitoring',
)()
const GuardLayoutDevicesGpusLazyImport = createFileRoute(
  '/_guard-layout/devices/gpus',
)()
const GuardLayoutDevicesCpusLazyImport = createFileRoute(
  '/_guard-layout/devices/cpus',
)()

// Create/Update Routes

const GuardLayoutRoute = GuardLayoutImport.update({
  id: '/_guard-layout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const GuardLayoutMonitoringLazyRoute = GuardLayoutMonitoringLazyImport.update({
  id: '/monitoring',
  path: '/monitoring',
  getParentRoute: () => GuardLayoutRoute,
} as any).lazy(() =>
  import('./routes/_guard-layout/monitoring.lazy').then((d) => d.Route),
)

const authRegistrationRoute = authRegistrationImport.update({
  id: '/(auth)/registration',
  path: '/registration',
  getParentRoute: () => rootRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const GuardLayoutDevicesGpusLazyRoute = GuardLayoutDevicesGpusLazyImport.update(
  {
    id: '/devices/gpus',
    path: '/devices/gpus',
    getParentRoute: () => GuardLayoutRoute,
  } as any,
).lazy(() =>
  import('./routes/_guard-layout/devices/gpus.lazy').then((d) => d.Route),
)

const GuardLayoutDevicesCpusLazyRoute = GuardLayoutDevicesCpusLazyImport.update(
  {
    id: '/devices/cpus',
    path: '/devices/cpus',
    getParentRoute: () => GuardLayoutRoute,
  } as any,
).lazy(() =>
  import('./routes/_guard-layout/devices/cpus.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_guard-layout': {
      id: '/_guard-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof GuardLayoutImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/registration': {
      id: '/(auth)/registration'
      path: '/registration'
      fullPath: '/registration'
      preLoaderRoute: typeof authRegistrationImport
      parentRoute: typeof rootRoute
    }
    '/_guard-layout/monitoring': {
      id: '/_guard-layout/monitoring'
      path: '/monitoring'
      fullPath: '/monitoring'
      preLoaderRoute: typeof GuardLayoutMonitoringLazyImport
      parentRoute: typeof GuardLayoutImport
    }
    '/_guard-layout/devices/cpus': {
      id: '/_guard-layout/devices/cpus'
      path: '/devices/cpus'
      fullPath: '/devices/cpus'
      preLoaderRoute: typeof GuardLayoutDevicesCpusLazyImport
      parentRoute: typeof GuardLayoutImport
    }
    '/_guard-layout/devices/gpus': {
      id: '/_guard-layout/devices/gpus'
      path: '/devices/gpus'
      fullPath: '/devices/gpus'
      preLoaderRoute: typeof GuardLayoutDevicesGpusLazyImport
      parentRoute: typeof GuardLayoutImport
    }
  }
}

// Create and export the route tree

interface GuardLayoutRouteChildren {
  GuardLayoutMonitoringLazyRoute: typeof GuardLayoutMonitoringLazyRoute
  GuardLayoutDevicesCpusLazyRoute: typeof GuardLayoutDevicesCpusLazyRoute
  GuardLayoutDevicesGpusLazyRoute: typeof GuardLayoutDevicesGpusLazyRoute
}

const GuardLayoutRouteChildren: GuardLayoutRouteChildren = {
  GuardLayoutMonitoringLazyRoute: GuardLayoutMonitoringLazyRoute,
  GuardLayoutDevicesCpusLazyRoute: GuardLayoutDevicesCpusLazyRoute,
  GuardLayoutDevicesGpusLazyRoute: GuardLayoutDevicesGpusLazyRoute,
}

const GuardLayoutRouteWithChildren = GuardLayoutRoute._addFileChildren(
  GuardLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof GuardLayoutRouteWithChildren
  '/login': typeof authLoginRoute
  '/registration': typeof authRegistrationRoute
  '/monitoring': typeof GuardLayoutMonitoringLazyRoute
  '/devices/cpus': typeof GuardLayoutDevicesCpusLazyRoute
  '/devices/gpus': typeof GuardLayoutDevicesGpusLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof GuardLayoutRouteWithChildren
  '/login': typeof authLoginRoute
  '/registration': typeof authRegistrationRoute
  '/monitoring': typeof GuardLayoutMonitoringLazyRoute
  '/devices/cpus': typeof GuardLayoutDevicesCpusLazyRoute
  '/devices/gpus': typeof GuardLayoutDevicesGpusLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_guard-layout': typeof GuardLayoutRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/registration': typeof authRegistrationRoute
  '/_guard-layout/monitoring': typeof GuardLayoutMonitoringLazyRoute
  '/_guard-layout/devices/cpus': typeof GuardLayoutDevicesCpusLazyRoute
  '/_guard-layout/devices/gpus': typeof GuardLayoutDevicesGpusLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/registration'
    | '/monitoring'
    | '/devices/cpus'
    | '/devices/gpus'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/registration'
    | '/monitoring'
    | '/devices/cpus'
    | '/devices/gpus'
  id:
    | '__root__'
    | '/'
    | '/_guard-layout'
    | '/(auth)/login'
    | '/(auth)/registration'
    | '/_guard-layout/monitoring'
    | '/_guard-layout/devices/cpus'
    | '/_guard-layout/devices/gpus'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  GuardLayoutRoute: typeof GuardLayoutRouteWithChildren
  authLoginRoute: typeof authLoginRoute
  authRegistrationRoute: typeof authRegistrationRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GuardLayoutRoute: GuardLayoutRouteWithChildren,
  authLoginRoute: authLoginRoute,
  authRegistrationRoute: authRegistrationRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_guard-layout",
        "/(auth)/login",
        "/(auth)/registration"
      ]
    },
    "/": {
      "filePath": "index.ts"
    },
    "/_guard-layout": {
      "filePath": "_guard-layout.tsx",
      "children": [
        "/_guard-layout/monitoring",
        "/_guard-layout/devices/cpus",
        "/_guard-layout/devices/gpus"
      ]
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(auth)/registration": {
      "filePath": "(auth)/registration.tsx"
    },
    "/_guard-layout/monitoring": {
      "filePath": "_guard-layout/monitoring.lazy.tsx",
      "parent": "/_guard-layout"
    },
    "/_guard-layout/devices/cpus": {
      "filePath": "_guard-layout/devices/cpus.lazy.tsx",
      "parent": "/_guard-layout"
    },
    "/_guard-layout/devices/gpus": {
      "filePath": "_guard-layout/devices/gpus.lazy.tsx",
      "parent": "/_guard-layout"
    }
  }
}
ROUTE_MANIFEST_END */
