/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as HomeImport } from './routes/_home'
import { Route as IndexImport } from './routes/index'
import { Route as HomeMonitoringImport } from './routes/_home/monitoring'
import { Route as authRegistrationImport } from './routes/(auth)/registration'
import { Route as authLoginImport } from './routes/(auth)/login'

// Create/Update Routes

const HomeRoute = HomeImport.update({
  id: '/_home',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const HomeMonitoringRoute = HomeMonitoringImport.update({
  id: '/monitoring',
  path: '/monitoring',
  getParentRoute: () => HomeRoute,
} as any)

const authRegistrationRoute = authRegistrationImport.update({
  id: '/(auth)/registration',
  path: '/registration',
  getParentRoute: () => rootRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_home': {
      id: '/_home'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof HomeImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/registration': {
      id: '/(auth)/registration'
      path: '/registration'
      fullPath: '/registration'
      preLoaderRoute: typeof authRegistrationImport
      parentRoute: typeof rootRoute
    }
    '/_home/monitoring': {
      id: '/_home/monitoring'
      path: '/monitoring'
      fullPath: '/monitoring'
      preLoaderRoute: typeof HomeMonitoringImport
      parentRoute: typeof HomeImport
    }
  }
}

// Create and export the route tree

interface HomeRouteChildren {
  HomeMonitoringRoute: typeof HomeMonitoringRoute
}

const HomeRouteChildren: HomeRouteChildren = {
  HomeMonitoringRoute: HomeMonitoringRoute,
}

const HomeRouteWithChildren = HomeRoute._addFileChildren(HomeRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof HomeRouteWithChildren
  '/login': typeof authLoginRoute
  '/registration': typeof authRegistrationRoute
  '/monitoring': typeof HomeMonitoringRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof HomeRouteWithChildren
  '/login': typeof authLoginRoute
  '/registration': typeof authRegistrationRoute
  '/monitoring': typeof HomeMonitoringRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_home': typeof HomeRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/registration': typeof authRegistrationRoute
  '/_home/monitoring': typeof HomeMonitoringRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/login' | '/registration' | '/monitoring'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/login' | '/registration' | '/monitoring'
  id:
    | '__root__'
    | '/'
    | '/_home'
    | '/(auth)/login'
    | '/(auth)/registration'
    | '/_home/monitoring'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HomeRoute: typeof HomeRouteWithChildren
  authLoginRoute: typeof authLoginRoute
  authRegistrationRoute: typeof authRegistrationRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HomeRoute: HomeRouteWithChildren,
  authLoginRoute: authLoginRoute,
  authRegistrationRoute: authRegistrationRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_home",
        "/(auth)/login",
        "/(auth)/registration"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_home": {
      "filePath": "_home.tsx",
      "children": [
        "/_home/monitoring"
      ]
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(auth)/registration": {
      "filePath": "(auth)/registration.tsx"
    },
    "/_home/monitoring": {
      "filePath": "_home/monitoring.tsx",
      "parent": "/_home"
    }
  }
}
ROUTE_MANIFEST_END */
